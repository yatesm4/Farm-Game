<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_char_down</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player INIT

image_speed = 0;

facing = 1;
action = false;
alt_action = false;

fishing = false;
fishing_event = false;
catch_fish = false;

select_item = 1;
idle = false;

draw_self();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// End Fishing Event

idle = false;
fishing_event = false;
fishing = false;
catch_fish = false;

image_speed = 0;


switch(facing)
{
    case 4:
        sprite_index = spr_char_up;
        break;
    case 2:
        sprite_index = spr_char_left;
        break;
    case 3:
        sprite_index = spr_char_right;
        break;
    case 1:
    default:
        sprite_index = spr_char_down;
        break;
}
image_index = 0;

notif.image_speed = 0.5;

show_debug_message("fishing event ended");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Fishing Event

show_debug_message("Please catch the fish...");
notif = instance_create(phy_position_x,(phy_position_y - 20),obj_Exclamation);

catch_fish = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Depth Correction

depth = phy_position_y * -1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle Input Logic

// grab time from time manager
h = obj_time_manager.h;
m = obj_time_manager.m;

// add control handlers
key_right = keyboard_check(vk_right) or keyboard_check(ord('D'));
key_left = keyboard_check(vk_left) or keyboard_check(ord('A'));
key_down = keyboard_check(vk_down) or keyboard_check(ord('S'));
key_up = keyboard_check(vk_up) or keyboard_check(ord('W'));

key_one = keyboard_check(ord('Z'));
key_two = keyboard_check(ord('X'));

key_item_one = keyboard_check(ord('1'));
key_item_two = keyboard_check(ord('2'));
key_item_three = keyboard_check(ord('3'));
key_item_four = keyboard_check(ord('4'));



// at 2 am, trigger yawn animation
if (h == 23 &amp;&amp; m == 0)
{
    idle = true;
    followTarget = instance_create((phy_position_x + 10),(phy_position_y - 20), obj_Zzz);
    sprite_index = spr_char_yawn;
    image_index = 0;
    image_speed = 0.1;
}

// at midnight go to sleep
if (h == 1 &amp;&amp; m == 3200)
{
    followTarget = instance_create((phy_position_x + 10),(phy_position_y - 20), obj_Zzz_Continuous);
    idle = true;
    sprite_index = spr_char_sleep;
    image_index = 0;
    image_speed = 0.1;
}



// if not idle, do shit

if (!(idle)) {

// at 2 am, trigger yawn animation
if (h == 2 &amp;&amp; m == 0)
{
    idle = true;
    followTarget = instance_create((phy_position_x + 10),(phy_position_y - 20), obj_Zzz);
    sprite_index = spr_char_yawn;
    image_index = 0;
    image_speed = 0.1;
}

// move left
if (key_left) {
    sprite_index = spr_char_left;
    image_speed = 0.1;
    phy_position_x -= 1;
    facing = 2;
}

// move right
if (key_right) {
    sprite_index = spr_char_right;
    image_speed = 0.1;
    phy_position_x += 1;
    facing = 3;
}

// move up
if (key_up) {
    sprite_index = spr_char_up;
    image_speed = 0.1;
    phy_position_y -= 1;
    facing = 4;
}

// move down
if (key_down) {
    sprite_index = spr_char_down;
    image_speed = 0.1;
    phy_position_y += 1;
    facing = 1;
}

// action key
if (key_one) {
    // Interaction
    action = true;
}

// alt action key
if (key_two) {
    // Interaction
    alt_action = true;
}

// end movement logic



// begin INV INTERACT logic

if(key_item_one){
    select_item = 1;
}

if(key_item_two){
    select_item = 2;
}

if(key_item_three){
    select_item = 3;
}

if(key_item_four){
    select_item = 4;
}

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Handle Fishing Action(s)

randomize();

var posX, posY, spr, i, j, dist, dropX, dropY;
var gm = obj_game_manager;
var pX = phy_position_x;
var pY = phy_position_y;

if(action == true &amp;&amp; idle == false &amp;&amp; fishing == false){
    // Check players inventory for selected fishing rod
    sel = select_item;
    
    items = ds_map_size(gm.save_inv);
    item = ds_map_find_first(gm.save_inv);
    
    // TODO
    // FIX CHECK SELECTED ITEM
    
    for(i=0;i&lt;sel;i+=1)
    {
        if(i == (sel - 1))
        {
            item_count = ds_map_find_value(gm.save_inv,item);
            if(item == "obj_Rod" &amp;&amp; item_count &gt; 0)
            {
                fishing = true;
            }
            else
            {
                exit;
            }
        }
    }
}

if(fishing &amp;&amp; idle == false &amp;&amp; fishing_event == false)
{

    switch(facing)
    {
        case 1:
            posY = pY + 16;
            posX = pX;
            break;
        case 2:
            posY = pY;
            posX = pX - 16;
            break;
        case 3:
            posY = pY;
            posX = pX + 16;
            break;
        case 4:
            posY = pY - 16;
            posX = pX;
            break;
        default:
            break;
    }
    tile = instance_position(posX, posY, obj_fishingWater);
    if tile
    {
        // set idle &amp; alarm
        idle = true;
        fishing_event = true;
        show_debug_message("Init fishing...");
        
        // gen random time till fish caught
        var o = irandom_range(600, 1200);
        
        // fishing event
        switch(facing)
        {
            case 4:
                sprite_index = spr_char_fishing_up;
                break;
            case 2:
                sprite_index = spr_char_fishing_left;
                break;
            case 3:
                sprite_index = spr_char_fishing_right;
                break;
            case 1:
            default:
                sprite_index = spr_char_fishing_down;
                break;
        }
        image_speed = 0.1;
        
        //var line = draw_line(phy_position_x,phy_position_y,pX,pY);
        
        show_debug_message("Fishing for " + string(o) + " miliseconds.");
        show_debug_message("Fishing line drawn from player to " + string(posX) + "," + string(posY));
        
        // End fishing action ?
        fishing = false;
        alarm[0] = o;
    }
    else
    {
        show_debug_message("You can't fish right now.");
        fishing = false;
        idle = false;
        fishing_event = false;
        exit;
    }
}

// Handle Catch Event

if (catch_fish &amp;&amp; key_two)
{
    show_debug_message("Fish caught.");
    switch(facing)
    {
        case 4:
            dropX = phy_position_x;
            dropY = (phy_position_y + 16);
            break;
        case 3:
            dropX = (phy_position_x - 16);
            dropY = phy_position_y;
            break;
        case 2:
            dropX = (phy_position_x + 16);
            dropY = phy_position_y;
            break;
        case 1:
        default:
            dropX = phy_position_x;
            dropY = (phy_position_y - 16);
            break;
    }
    instance_create(dropX,dropY,obj_Fish);
    alarm[1]=1;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Stop Fishing Animation
if fishing_event {
    if (image_index = 1) {
            // stop fishing
            image_speed = 0;
            //fishing_event = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_fishingWater">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Collide With
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Boundary">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Collide with

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Stop moving animation
image_speed = 0;
if(!(sprite_index == spr_char_sleep || sprite_index == spr_char_fishing_left || sprite_index == spr_char_fishing_right || sprite_index == spr_char_fishing_up || sprite_index == spr_char_fishing_down))
{
    image_index = 0;
    idle = false;
}
else
{
    image_index = 9;
}

show_debug_message("player anim ended");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Self
draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="90">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Action Button Release
action = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="88">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Alt Action Button Release
alt_action = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.100000001490116</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>8,8</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
