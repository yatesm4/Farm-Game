<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Depth
depth = y * -1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// IVars

name = object_get_name(object_index);

// sinusoidal wave floating for object
anchorY = phy_position_y;
frequency = 0.05; // how quickly the object floats up and down
amplitude = 2; // max value above and below anchorY that the object can float to. 
timer = 0; // will keep counting up, and will let us reach each new point on the sin wave every step
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Sin Wave Movement

phy_position_y = anchorY + sin(timer*frequency)*amplitude;
timer++;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Player">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Pickup on Player Interact

followTarget = instance_create(x,y, obj_Collect);
var items;

items = ds_map_size(obj_game_manager.save_inv);

show_debug_message("Inventory Count: " + string(items) );

if(items &lt; 4)
{
    // Room for item -&gt; add to inventory
    var val = ds_map_find_value(obj_game_manager.save_inv,name);

    if (!is_undefined(val))
    {
        val += 1;
        show_debug_message("Adding Item: " + string(name));
        show_debug_message("Count: " + string(val));
        ds_map_replace(obj_game_manager.save_inv,name,val);
    }
    else
    {
        show_debug_message("Adding Item: " + string(name));
        show_debug_message("Count: " + string(val));
        ds_map_add(obj_game_manager.save_inv,name,1);
    }
    
}
else
{
    // check if item is one of current inv items
    
    // Room for item -&gt; add to inventory
    var val = ds_map_find_value(obj_game_manager.save_inv,name);

    if (!is_undefined(val))
    {
        val += 1;
        show_debug_message("Adding Item: " + string(name));
        show_debug_message("Count: " + string(val));
        ds_map_replace(obj_game_manager.save_inv,name,val);
    }
    else
    {
        show_debug_message("No room for item: " + string(name));
    }
}

instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
