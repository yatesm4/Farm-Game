<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize IVARs
count = true;
rs = room_speed;
m = 0;//minutes
minute = "";
h = 6;//hours

am = true;
am_pm = "am";
day = 01;
season = 2;
year = 1;

/// Set Light Vars
alpha = 0;
alarm[0]=1*room_speed;

// Set Surface
nightCycleSurf = surface_create(room_width, room_height);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set Alpha
switch(h)
{
case 02:
case 03:
    show_debug_message("Setting light to 2am");
    alpha = 0.8;
    break;
case 04:
case 05:
    show_debug_message("Setting light to 4am");
    alpha = 0.5;
    break;
case 06:
case 07:
case 08:
    show_debug_message("Setting light to 6am");
    alpha = 0.2;
    break;
case 09:
case 10:
case 11:
case 12:
case 13:
case 14:
case 15:
case 16:
    show_debug_message("Setting light to 9am");
    alpha = 0;
    break;
case 17:
    show_debug_message("Setting light to 5pm");
    alpha = 0.1;
    break;
case 18:
    show_debug_message("Setting light to 6pm");
    alpha = 0.2;
    break;
case 19:
    show_debug_message("Setting light to 7pm");
    alpha = 0.3;
    break;
case 20:
    show_debug_message("Setting light to 8pm");
    alpha = 0.4;
    break;
case 21:
    show_debug_message("Setting light to 9pm");
    alpha = 0.6;
    break;
case 22:
    show_debug_message("Setting light to 10pm");
    alpha = 0.8;
    break;
case 23:
case 00:
case 01:
    show_debug_message("Setting light to 11pm");
    alpha = 1.0;
    break;
}
alarm[0]=room_speed * 60;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw HUD

draw_set_colour(c_white);
draw_text(30,135,string(season)+string("/")+string(day)+string("/")+string(year));

// Draw Inventory Display

var i, item_count, index;
// draw 4 inventory slots
var invY = 220;
var item = ds_map_find_first(obj_game_manager.save_inv);
for (i=0;i&lt;4;i+=1)
{
    if(!is_undefined(item))
    {
        // switch the value of the name of the item for the subimg of the ItemSlot sprite
        // TODO get index from array map of items to eliminate switch statement
        switch(item)
        {
            case "obj_Seeds":
                index = 1;
                break;
            case "obj_WheatBundle":
                index = 2;
                break;
            case "obj_Rod":
                index = 3;
                break;
            case "obj_Fish":
                index = 4;
                break;
            default:
                index = 0;
        }
        // get item count
        item_count = ds_map_find_value(obj_game_manager.save_inv,item);
    }
    else
    {
        // if no item, set index to 0
        index = 0;
        item_count = 0;
    }
    // draw item slot frame
    draw_sprite_stretched(sp_ItemSlot,index,30,invY,128,128);
    
    // if item count is above 0
    if(item_count &gt; 0)
    {
        // draw count onto hud
        draw_text(80,(invY + 15),string(item_count));
    }
    
    // increase y
    invY += 148;
    // get next item
    item = ds_map_find_next(obj_game_manager.save_inv,item);
}


var selectY;
with(obj_Player){
    // Draw selected item frame onto screen
    switch(select_item){
        case 1:
            selectY = 220;
            break;
        case 2:
            selectY = 368;
            break;
        case 3:
            selectY = 516;
            break;
        case 4:
            selectY = 664;
            break;
    }
    draw_sprite_stretched(sp_ItemSlot_Active,0,30,selectY,128,128);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Time Math

m += 1;
m %= (6000); // time multiplier ?

if (m == 0) { h += 1 }

if (h &gt; 23) h = 00;

// Draw the Timer
draw_set_font(font_System);
draw_set_colour(c_black);
draw_sprite_stretched(sp_hud,0,55,27,250,100);

// if past noon, set am to false
if (h&lt;12) {
    am = true;
} else {
    am = false;
}

// format m into displayable time
if(m&lt;1000){
    if(m&lt;100){
        minute = "00";
    }else{
        minute = "0" + string_copy(string(m), 0, 1);
    }
}else{
    minute = string_copy(string(m), 0, 2);
}
if(m==0){minute="0";}

// format time and display
if (h&lt;10){
    if (m&lt;10)
    {
        if(am == true){
            draw_text(75,50,string("0")+string(h)+string(":0")+minute+string("am"));
        }else{
            draw_text(75,50,string("0")+string(h)+string(":0")+minute+string("pm"));
        }
    }else{
        if(am == true){
            draw_text(75,50,string("0")+string(h)+string(":")+minute+string("am"));
        }else{
            draw_text(75,50,string("0")+string(h)+string(":")+minute+string("pm"));
        }
    }
}else{
    if(m&lt;10){
        if(am == true){
            draw_text(75,50,string(h)+string(":0")+minute+string("am"));
        }else{
            draw_text(75,50,string(h)+string(":0")+minute+string("pm"));
        }
    }else{
        if(am == true){
            draw_text(75,50,string(h)+string(":")+minute+string("am"));
        }else{
            draw_text(75,50,string(h)+string(":")+minute+string("pm"));
        }
    }
}

// Check for end of day

if (h == 1 &amp;&amp; m == 3500)
{
    scr_end_day();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Lighting
surface_set_target(nightCycleSurf);
draw_clear(c_black);

// Draw Glow
with(obj_Torch){
    draw_set_blend_mode(bm_src_colour);
    draw_sprite(sp_glow,image_speed,x,y);
    draw_set_blend_mode(bm_normal);
}

with(obj_Player){
    draw_set_blend_mode(bm_src_colour);
    draw_sprite(sp_glow,image_speed,x,y);
    draw_set_blend_mode(bm_normal);
}

surface_reset_target();
draw_surface_ext(nightCycleSurf,0,0,1,1,0,c_white,alpha);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
